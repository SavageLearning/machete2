/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.WorkerrequestsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Workerrequests extends TableImpl<WorkerrequestsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.WorkerRequests</code>
     */
    public static final Workerrequests WORKERREQUESTS = new Workerrequests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkerrequestsRecord> getRecordType() {
        return WorkerrequestsRecord.class;
    }

    /**
     * The column <code>public.WorkerRequests.id</code>.
     */
    public final TableField<WorkerrequestsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"WorkerRequests_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.WorkerRequests.WorkOrderID</code>.
     */
    public final TableField<WorkerrequestsRecord, Integer> WORKORDERID = createField(DSL.name("WorkOrderID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkerRequests.WorkerID</code>.
     */
    public final TableField<WorkerrequestsRecord, Integer> WORKERID = createField(DSL.name("WorkerID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkerRequests.datecreated</code>.
     */
    public final TableField<WorkerrequestsRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.WorkerRequests.dateupdated</code>.
     */
    public final TableField<WorkerrequestsRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.WorkerRequests.Createdby</code>.
     */
    public final TableField<WorkerrequestsRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.WorkerRequests.Updatedby</code>.
     */
    public final TableField<WorkerrequestsRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    private Workerrequests(Name alias, Table<WorkerrequestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Workerrequests(Name alias, Table<WorkerrequestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.WorkerRequests</code> table reference
     */
    public Workerrequests(String alias) {
        this(DSL.name(alias), WORKERREQUESTS);
    }

    /**
     * Create an aliased <code>public.WorkerRequests</code> table reference
     */
    public Workerrequests(Name alias) {
        this(alias, WORKERREQUESTS);
    }

    /**
     * Create a <code>public.WorkerRequests</code> table reference
     */
    public Workerrequests() {
        this(DSL.name("WorkerRequests"), null);
    }

    public <O extends Record> Workerrequests(Table<O> child, ForeignKey<O, WorkerrequestsRecord> key) {
        super(child, key, WORKERREQUESTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<WorkerrequestsRecord> getPrimaryKey() {
        return Keys.PK__WORKERRE__3214EC27776DAD9B;
    }

    @Override
    public List<UniqueKey<WorkerrequestsRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkerrequestsRecord>>asList(Keys.PK__WORKERRE__3214EC27776DAD9B);
    }

    @Override
    public List<ForeignKey<WorkerrequestsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkerrequestsRecord, ?>>asList(Keys.WORKERREQUESTS__WORKERREQUEST_WORKORDER, Keys.WORKERREQUESTS__WORKERREQUEST_WORKERREQUESTED);
    }

    public Workorders workorders() {
        return new Workorders(this, Keys.WORKERREQUESTS__WORKERREQUEST_WORKORDER);
    }

    public Workers workers() {
        return new Workers(this, Keys.WORKERREQUESTS__WORKERREQUEST_WORKERREQUESTED);
    }

    @Override
    public Workerrequests as(String alias) {
        return new Workerrequests(DSL.name(alias), this);
    }

    @Override
    public Workerrequests as(Name alias) {
        return new Workerrequests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Workerrequests rename(String name) {
        return new Workerrequests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Workerrequests rename(Name name) {
        return new Workerrequests(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
