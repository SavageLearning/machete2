/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.EmailworkorderRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Emailworkorder extends TableImpl<EmailworkorderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.EmailWorkOrder</code>
     */
    public static final Emailworkorder EMAILWORKORDER = new Emailworkorder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailworkorderRecord> getRecordType() {
        return EmailworkorderRecord.class;
    }

    /**
     * The column <code>public.EmailWorkOrder.WorkOrder_ID</code>.
     */
    public final TableField<EmailworkorderRecord, Integer> WORKORDER_ID = createField(DSL.name("WorkOrder_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.EmailWorkOrder.Email_ID</code>.
     */
    public final TableField<EmailworkorderRecord, Integer> EMAIL_ID = createField(DSL.name("Email_ID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.EmailWorkOrder.id</code>.
     */
    public final TableField<EmailworkorderRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.EmailWorkOrder.datecreated</code>.
     */
    public final TableField<EmailworkorderRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.EmailWorkOrder.dateupdated</code>.
     */
    public final TableField<EmailworkorderRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.EmailWorkOrder.Createdby</code>.
     */
    public final TableField<EmailworkorderRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.EmailWorkOrder.Updatedby</code>.
     */
    public final TableField<EmailworkorderRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    private Emailworkorder(Name alias, Table<EmailworkorderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Emailworkorder(Name alias, Table<EmailworkorderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.EmailWorkOrder</code> table reference
     */
    public Emailworkorder(String alias) {
        this(DSL.name(alias), EMAILWORKORDER);
    }

    /**
     * Create an aliased <code>public.EmailWorkOrder</code> table reference
     */
    public Emailworkorder(Name alias) {
        this(alias, EMAILWORKORDER);
    }

    /**
     * Create a <code>public.EmailWorkOrder</code> table reference
     */
    public Emailworkorder() {
        this(DSL.name("EmailWorkOrder"), null);
    }

    public <O extends Record> Emailworkorder(Table<O> child, ForeignKey<O, EmailworkorderRecord> key) {
        super(child, key, EMAILWORKORDER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<EmailworkorderRecord> getPrimaryKey() {
        return Keys.PK_DBO_EMAILWORKORDERS;
    }

    @Override
    public List<UniqueKey<EmailworkorderRecord>> getKeys() {
        return Arrays.<UniqueKey<EmailworkorderRecord>>asList(Keys.PK_DBO_EMAILWORKORDERS);
    }

    @Override
    public List<ForeignKey<EmailworkorderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EmailworkorderRecord, ?>>asList(Keys.EMAILWORKORDER__FK_EMAILWORKORDER_WORKORDERS_WORKORDER_ID, Keys.EMAILWORKORDER__FK_DBO_EMAILWORKORDERS_DBO_EMAILS_EMAIL_ID);
    }

    public Workorders workorders() {
        return new Workorders(this, Keys.EMAILWORKORDER__FK_EMAILWORKORDER_WORKORDERS_WORKORDER_ID);
    }

    public Emails emails() {
        return new Emails(this, Keys.EMAILWORKORDER__FK_DBO_EMAILWORKORDERS_DBO_EMAILS_EMAIL_ID);
    }

    @Override
    public Emailworkorder as(String alias) {
        return new Emailworkorder(DSL.name(alias), this);
    }

    @Override
    public Emailworkorder as(Name alias) {
        return new Emailworkorder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Emailworkorder rename(String name) {
        return new Emailworkorder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Emailworkorder rename(Name name) {
        return new Emailworkorder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, Integer, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
