/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.JoineventimageRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Joineventimage extends TableImpl<JoineventimageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.JoinEventImage</code>
     */
    public static final Joineventimage JOINEVENTIMAGE = new Joineventimage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JoineventimageRecord> getRecordType() {
        return JoineventimageRecord.class;
    }

    /**
     * The column <code>public.JoinEventImage.id</code>.
     */
    public final TableField<JoineventimageRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"JoinEventImage_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.JoinEventImage.datecreated</code>.
     */
    public final TableField<JoineventimageRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.JoinEventImage.dateupdated</code>.
     */
    public final TableField<JoineventimageRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.JoinEventImage.Createdby</code>.
     */
    public final TableField<JoineventimageRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.JoinEventImage.Updatedby</code>.
     */
    public final TableField<JoineventimageRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.JoinEventImage.EventID</code>.
     */
    public final TableField<JoineventimageRecord, Integer> EVENTID = createField(DSL.name("EventID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.JoinEventImage.ImageID</code>.
     */
    public final TableField<JoineventimageRecord, Integer> IMAGEID = createField(DSL.name("ImageID"), SQLDataType.INTEGER.nullable(false), this, "");

    private Joineventimage(Name alias, Table<JoineventimageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Joineventimage(Name alias, Table<JoineventimageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.JoinEventImage</code> table reference
     */
    public Joineventimage(String alias) {
        this(DSL.name(alias), JOINEVENTIMAGE);
    }

    /**
     * Create an aliased <code>public.JoinEventImage</code> table reference
     */
    public Joineventimage(Name alias) {
        this(alias, JOINEVENTIMAGE);
    }

    /**
     * Create a <code>public.JoinEventImage</code> table reference
     */
    public Joineventimage() {
        this(DSL.name("JoinEventImage"), null);
    }

    public <O extends Record> Joineventimage(Table<O> child, ForeignKey<O, JoineventimageRecord> key) {
        super(child, key, JOINEVENTIMAGE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<JoineventimageRecord> getPrimaryKey() {
        return Keys.PK_JOINEVENTIMAGE;
    }

    @Override
    public List<UniqueKey<JoineventimageRecord>> getKeys() {
        return Arrays.<UniqueKey<JoineventimageRecord>>asList(Keys.PK_JOINEVENTIMAGE);
    }

    @Override
    public List<ForeignKey<JoineventimageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<JoineventimageRecord, ?>>asList(Keys.JOINEVENTIMAGE__FK_DBO_JOINEVENTIMAGES_DBO_EVENTS_EVENTID, Keys.JOINEVENTIMAGE__FK_DBO_JOINEVENTIMAGES_DBO_IMAGES_IMAGEID);
    }

    public Events events() {
        return new Events(this, Keys.JOINEVENTIMAGE__FK_DBO_JOINEVENTIMAGES_DBO_EVENTS_EVENTID);
    }

    public Images images() {
        return new Images(this, Keys.JOINEVENTIMAGE__FK_DBO_JOINEVENTIMAGES_DBO_IMAGES_IMAGEID);
    }

    @Override
    public Joineventimage as(String alias) {
        return new Joineventimage(DSL.name(alias), this);
    }

    @Override
    public Joineventimage as(Name alias) {
        return new Joineventimage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Joineventimage rename(String name) {
        return new Joineventimage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Joineventimage rename(Name name) {
        return new Joineventimage(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, LocalDateTime, LocalDateTime, String, String, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
