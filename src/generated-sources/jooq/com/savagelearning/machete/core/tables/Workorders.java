/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.WorkordersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Workorders extends TableImpl<WorkordersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.WorkOrders</code>
     */
    public static final Workorders WORKORDERS = new Workorders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkordersRecord> getRecordType() {
        return WorkordersRecord.class;
    }

    /**
     * The column <code>public.WorkOrders.id</code>.
     */
    public final TableField<WorkordersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"WorkOrders_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.WorkOrders.EmployerID</code>.
     */
    public final TableField<WorkordersRecord, Integer> EMPLOYERID = createField(DSL.name("EmployerID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.paperOrderNum</code>.
     */
    public final TableField<WorkordersRecord, Integer> PAPERORDERNUM = createField(DSL.name("paperOrderNum"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.WorkOrders.waPseudoIDCounter</code>.
     */
    public final TableField<WorkordersRecord, Integer> WAPSEUDOIDCOUNTER = createField(DSL.name("waPseudoIDCounter"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.contactName</code>.
     */
    public final TableField<WorkordersRecord, String> CONTACTNAME = createField(DSL.name("contactName"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.status</code>.
     */
    public final TableField<WorkordersRecord, Integer> STATUS = createField(DSL.name("status"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.workSiteAddress1</code>.
     */
    public final TableField<WorkordersRecord, String> WORKSITEADDRESS1 = createField(DSL.name("workSiteAddress1"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.workSiteAddress2</code>.
     */
    public final TableField<WorkordersRecord, String> WORKSITEADDRESS2 = createField(DSL.name("workSiteAddress2"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.WorkOrders.city</code>.
     */
    public final TableField<WorkordersRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.state</code>.
     */
    public final TableField<WorkordersRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.phone</code>.
     */
    public final TableField<WorkordersRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.zipcode</code>.
     */
    public final TableField<WorkordersRecord, String> ZIPCODE = createField(DSL.name("zipcode"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.typeOfWorkID</code>.
     */
    public final TableField<WorkordersRecord, Integer> TYPEOFWORKID = createField(DSL.name("typeOfWorkID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.englishRequired</code>.
     */
    public final TableField<WorkordersRecord, String> ENGLISHREQUIRED = createField(DSL.name("englishRequired"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.englishRequiredNote</code>.
     */
    public final TableField<WorkordersRecord, String> ENGLISHREQUIREDNOTE = createField(DSL.name("englishRequiredNote"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.WorkOrders.lunchSupplied</code>.
     */
    public final TableField<WorkordersRecord, String> LUNCHSUPPLIED = createField(DSL.name("lunchSupplied"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.permanentPlacement</code>.
     */
    public final TableField<WorkordersRecord, String> PERMANENTPLACEMENT = createField(DSL.name("permanentPlacement"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.transportMethodID</code>.
     */
    public final TableField<WorkordersRecord, Integer> TRANSPORTMETHODID = createField(DSL.name("transportMethodID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.transportFee</code>.
     */
    public final TableField<WorkordersRecord, Double> TRANSPORTFEE = createField(DSL.name("transportFee"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.transportFeeExtra</code>.
     */
    public final TableField<WorkordersRecord, Double> TRANSPORTFEEEXTRA = createField(DSL.name("transportFeeExtra"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.description</code>.
     */
    public final TableField<WorkordersRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>public.WorkOrders.dateTimeofWork</code>.
     */
    public final TableField<WorkordersRecord, LocalDateTime> DATETIMEOFWORK = createField(DSL.name("dateTimeofWork"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.timeFlexible</code>.
     */
    public final TableField<WorkordersRecord, String> TIMEFLEXIBLE = createField(DSL.name("timeFlexible"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.datecreated</code>.
     */
    public final TableField<WorkordersRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.dateupdated</code>.
     */
    public final TableField<WorkordersRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.WorkOrders.Createdby</code>.
     */
    public final TableField<WorkordersRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.WorkOrders.Updatedby</code>.
     */
    public final TableField<WorkordersRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.WorkOrders.onlineSource</code>.
     */
    public final TableField<WorkordersRecord, String> ONLINESOURCE = createField(DSL.name("onlineSource"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field("B'0'::\"bit\"", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>public.WorkOrders.transportTransactType</code>.
     */
    public final TableField<WorkordersRecord, Integer> TRANSPORTTRANSACTTYPE = createField(DSL.name("transportTransactType"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.WorkOrders.transportTransactID</code>.
     */
    public final TableField<WorkordersRecord, String> TRANSPORTTRANSACTID = createField(DSL.name("transportTransactID"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.WorkOrders.additionalNotes</code>.
     */
    public final TableField<WorkordersRecord, String> ADDITIONALNOTES = createField(DSL.name("additionalNotes"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.WorkOrders.disclosureAgreement</code>.
     */
    public final TableField<WorkordersRecord, String> DISCLOSUREAGREEMENT = createField(DSL.name("disclosureAgreement"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>public.WorkOrders.statusEN</code>.
     */
    public final TableField<WorkordersRecord, String> STATUSEN = createField(DSL.name("statusEN"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.WorkOrders.statusES</code>.
     */
    public final TableField<WorkordersRecord, String> STATUSES = createField(DSL.name("statusES"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.WorkOrders.transportMethodEN</code>.
     */
    public final TableField<WorkordersRecord, String> TRANSPORTMETHODEN = createField(DSL.name("transportMethodEN"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.WorkOrders.transportMethodES</code>.
     */
    public final TableField<WorkordersRecord, String> TRANSPORTMETHODES = createField(DSL.name("transportMethodES"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.WorkOrders.timeZoneOffset</code>.
     */
    public final TableField<WorkordersRecord, Double> TIMEZONEOFFSET = createField(DSL.name("timeZoneOffset"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.WorkOrders.ppFee</code>.
     */
    public final TableField<WorkordersRecord, Double> PPFEE = createField(DSL.name("ppFee"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.WorkOrders.ppResponse</code>.
     */
    public final TableField<WorkordersRecord, String> PPRESPONSE = createField(DSL.name("ppResponse"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.WorkOrders.ppPaymentToken</code>.
     */
    public final TableField<WorkordersRecord, String> PPPAYMENTTOKEN = createField(DSL.name("ppPaymentToken"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.WorkOrders.ppPaymentID</code>.
     */
    public final TableField<WorkordersRecord, String> PPPAYMENTID = createField(DSL.name("ppPaymentID"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.WorkOrders.ppPayerID</code>.
     */
    public final TableField<WorkordersRecord, String> PPPAYERID = createField(DSL.name("ppPayerID"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.WorkOrders.ppState</code>.
     */
    public final TableField<WorkordersRecord, String> PPSTATE = createField(DSL.name("ppState"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.WorkOrders.transportProviderID</code>.
     */
    public final TableField<WorkordersRecord, Integer> TRANSPORTPROVIDERID = createField(DSL.name("transportProviderID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private Workorders(Name alias, Table<WorkordersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Workorders(Name alias, Table<WorkordersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.WorkOrders</code> table reference
     */
    public Workorders(String alias) {
        this(DSL.name(alias), WORKORDERS);
    }

    /**
     * Create an aliased <code>public.WorkOrders</code> table reference
     */
    public Workorders(Name alias) {
        this(alias, WORKORDERS);
    }

    /**
     * Create a <code>public.WorkOrders</code> table reference
     */
    public Workorders() {
        this(DSL.name("WorkOrders"), null);
    }

    public <O extends Record> Workorders(Table<O> child, ForeignKey<O, WorkordersRecord> key) {
        super(child, key, WORKORDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<WorkordersRecord> getPrimaryKey() {
        return Keys.PK__WORKORDE__3214EC278C43EFBC;
    }

    @Override
    public List<UniqueKey<WorkordersRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkordersRecord>>asList(Keys.PK__WORKORDE__3214EC278C43EFBC);
    }

    @Override
    public List<ForeignKey<WorkordersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkordersRecord, ?>>asList(Keys.WORKORDERS__EMPLOYER_WORKORDERS);
    }

    public Employers employers() {
        return new Employers(this, Keys.WORKORDERS__EMPLOYER_WORKORDERS);
    }

    @Override
    public Workorders as(String alias) {
        return new Workorders(DSL.name(alias), this);
    }

    @Override
    public Workorders as(Name alias) {
        return new Workorders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Workorders rename(String name) {
        return new Workorders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Workorders rename(Name name) {
        return new Workorders(name, null);
    }
}
