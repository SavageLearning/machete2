/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.WorkassignmentsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Workassignments extends TableImpl<WorkassignmentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.WorkAssignments</code>
     */
    public static final Workassignments WORKASSIGNMENTS = new Workassignments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkassignmentsRecord> getRecordType() {
        return WorkassignmentsRecord.class;
    }

    /**
     * The column <code>public.WorkAssignments.id</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"WorkAssignments_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.WorkAssignments.workerAssignedID</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> WORKERASSIGNEDID = createField(DSL.name("workerAssignedID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.WorkAssignments.workOrderID</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> WORKORDERID = createField(DSL.name("workOrderID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.workerSigninID</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> WORKERSIGNINID = createField(DSL.name("workerSigninID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.WorkAssignments.active</code>.
     */
    public final TableField<WorkassignmentsRecord, String> ACTIVE = createField(DSL.name("active"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.pseudoID</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> PSEUDOID = createField(DSL.name("pseudoID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.WorkAssignments.description</code>.
     */
    public final TableField<WorkassignmentsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.WorkAssignments.englishLevelID</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> ENGLISHLEVELID = createField(DSL.name("englishLevelID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.skillID</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> SKILLID = createField(DSL.name("skillID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.hourlyWage</code>.
     */
    public final TableField<WorkassignmentsRecord, Double> HOURLYWAGE = createField(DSL.name("hourlyWage"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.hours</code>.
     */
    public final TableField<WorkassignmentsRecord, Double> HOURS = createField(DSL.name("hours"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.hourRange</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> HOURRANGE = createField(DSL.name("hourRange"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.WorkAssignments.days</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> DAYS = createField(DSL.name("days"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.qualityOfWork</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> QUALITYOFWORK = createField(DSL.name("qualityOfWork"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.followDirections</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> FOLLOWDIRECTIONS = createField(DSL.name("followDirections"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.attitude</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> ATTITUDE = createField(DSL.name("attitude"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.reliability</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> RELIABILITY = createField(DSL.name("reliability"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.transportProgram</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> TRANSPORTPROGRAM = createField(DSL.name("transportProgram"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.comments</code>.
     */
    public final TableField<WorkassignmentsRecord, String> COMMENTS = createField(DSL.name("comments"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.WorkAssignments.datecreated</code>.
     */
    public final TableField<WorkassignmentsRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.dateupdated</code>.
     */
    public final TableField<WorkassignmentsRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.WorkAssignments.Createdby</code>.
     */
    public final TableField<WorkassignmentsRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.WorkAssignments.Updatedby</code>.
     */
    public final TableField<WorkassignmentsRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.WorkAssignments.surcharge</code>.
     */
    public final TableField<WorkassignmentsRecord, Double> SURCHARGE = createField(DSL.name("surcharge"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.WorkAssignments.workerRating</code>.
     */
    public final TableField<WorkassignmentsRecord, Integer> WORKERRATING = createField(DSL.name("workerRating"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.WorkAssignments.workerRatingComments</code>.
     */
    public final TableField<WorkassignmentsRecord, String> WORKERRATINGCOMMENTS = createField(DSL.name("workerRatingComments"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.WorkAssignments.weightLifted</code>.
     */
    public final TableField<WorkassignmentsRecord, String> WEIGHTLIFTED = createField(DSL.name("weightLifted"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>public.WorkAssignments.skillEN</code>.
     */
    public final TableField<WorkassignmentsRecord, String> SKILLEN = createField(DSL.name("skillEN"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.WorkAssignments.skillES</code>.
     */
    public final TableField<WorkassignmentsRecord, String> SKILLES = createField(DSL.name("skillES"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.WorkAssignments.fullWAID</code>.
     */
    public final TableField<WorkassignmentsRecord, String> FULLWAID = createField(DSL.name("fullWAID"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.WorkAssignments.minEarnings</code>.
     */
    public final TableField<WorkassignmentsRecord, Double> MINEARNINGS = createField(DSL.name("minEarnings"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.WorkAssignments.maxEarnings</code>.
     */
    public final TableField<WorkassignmentsRecord, Double> MAXEARNINGS = createField(DSL.name("maxEarnings"), SQLDataType.DOUBLE.nullable(false).defaultValue(DSL.field("0", SQLDataType.DOUBLE)), this, "");

    /**
     * The column <code>public.WorkAssignments.transportCost</code>.
     */
    public final TableField<WorkassignmentsRecord, Double> TRANSPORTCOST = createField(DSL.name("transportCost"), SQLDataType.DOUBLE, this, "");

    private Workassignments(Name alias, Table<WorkassignmentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Workassignments(Name alias, Table<WorkassignmentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.WorkAssignments</code> table reference
     */
    public Workassignments(String alias) {
        this(DSL.name(alias), WORKASSIGNMENTS);
    }

    /**
     * Create an aliased <code>public.WorkAssignments</code> table reference
     */
    public Workassignments(Name alias) {
        this(alias, WORKASSIGNMENTS);
    }

    /**
     * Create a <code>public.WorkAssignments</code> table reference
     */
    public Workassignments() {
        this(DSL.name("WorkAssignments"), null);
    }

    public <O extends Record> Workassignments(Table<O> child, ForeignKey<O, WorkassignmentsRecord> key) {
        super(child, key, WORKASSIGNMENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<WorkassignmentsRecord> getPrimaryKey() {
        return Keys.PK__WORKASSI__3214EC2780748FBF;
    }

    @Override
    public List<UniqueKey<WorkassignmentsRecord>> getKeys() {
        return Arrays.<UniqueKey<WorkassignmentsRecord>>asList(Keys.PK__WORKASSI__3214EC2780748FBF);
    }

    @Override
    public List<ForeignKey<WorkassignmentsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WorkassignmentsRecord, ?>>asList(Keys.WORKASSIGNMENTS__WORKER_WORKASSIGNMENTS, Keys.WORKASSIGNMENTS__WORKORDER_WORKASSIGNMENTS, Keys.WORKASSIGNMENTS__WORKASSIGNMENT_WORKERSIGININ);
    }

    public Workers workers() {
        return new Workers(this, Keys.WORKASSIGNMENTS__WORKER_WORKASSIGNMENTS);
    }

    public Workorders workorders() {
        return new Workorders(this, Keys.WORKASSIGNMENTS__WORKORDER_WORKASSIGNMENTS);
    }

    public Workersignins workersignins() {
        return new Workersignins(this, Keys.WORKASSIGNMENTS__WORKASSIGNMENT_WORKERSIGININ);
    }

    @Override
    public Workassignments as(String alias) {
        return new Workassignments(DSL.name(alias), this);
    }

    @Override
    public Workassignments as(Name alias) {
        return new Workassignments(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Workassignments rename(String name) {
        return new Workassignments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Workassignments rename(Name name) {
        return new Workassignments(name, null);
    }
}
