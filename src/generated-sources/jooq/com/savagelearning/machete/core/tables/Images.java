/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.ImagesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row12;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Images extends TableImpl<ImagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Images</code>
     */
    public static final Images IMAGES = new Images();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImagesRecord> getRecordType() {
        return ImagesRecord.class;
    }

    /**
     * The column <code>public.Images.id</code>.
     */
    public final TableField<ImagesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"Images_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Images.ImageData</code>.
     */
    public final TableField<ImagesRecord, byte[]> IMAGEDATA = createField(DSL.name("ImageData"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.Images.ImageMimeType</code>.
     */
    public final TableField<ImagesRecord, String> IMAGEMIMETYPE = createField(DSL.name("ImageMimeType"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Images.filename</code>.
     */
    public final TableField<ImagesRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.Images.Thumbnail</code>.
     */
    public final TableField<ImagesRecord, byte[]> THUMBNAIL = createField(DSL.name("Thumbnail"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>public.Images.ThumbnailMimeType</code>.
     */
    public final TableField<ImagesRecord, String> THUMBNAILMIMETYPE = createField(DSL.name("ThumbnailMimeType"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Images.parenttable</code>.
     */
    public final TableField<ImagesRecord, String> PARENTTABLE = createField(DSL.name("parenttable"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Images.recordkey</code>.
     */
    public final TableField<ImagesRecord, String> RECORDKEY = createField(DSL.name("recordkey"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.Images.datecreated</code>.
     */
    public final TableField<ImagesRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Images.dateupdated</code>.
     */
    public final TableField<ImagesRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Images.Createdby</code>.
     */
    public final TableField<ImagesRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Images.Updatedby</code>.
     */
    public final TableField<ImagesRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    private Images(Name alias, Table<ImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Images(Name alias, Table<ImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.Images</code> table reference
     */
    public Images(String alias) {
        this(DSL.name(alias), IMAGES);
    }

    /**
     * Create an aliased <code>public.Images</code> table reference
     */
    public Images(Name alias) {
        this(alias, IMAGES);
    }

    /**
     * Create a <code>public.Images</code> table reference
     */
    public Images() {
        this(DSL.name("Images"), null);
    }

    public <O extends Record> Images(Table<O> child, ForeignKey<O, ImagesRecord> key) {
        super(child, key, IMAGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ImagesRecord> getPrimaryKey() {
        return Keys.PK__IMAGES__3214EC27C636928E;
    }

    @Override
    public List<UniqueKey<ImagesRecord>> getKeys() {
        return Arrays.<UniqueKey<ImagesRecord>>asList(Keys.PK__IMAGES__3214EC27C636928E);
    }

    @Override
    public Images as(String alias) {
        return new Images(DSL.name(alias), this);
    }

    @Override
    public Images as(Name alias) {
        return new Images(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Images rename(String name) {
        return new Images(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Images rename(Name name) {
        return new Images(name, null);
    }

    // -------------------------------------------------------------------------
    // Row12 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, byte[], String, String, byte[], String, String, String, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }
}
