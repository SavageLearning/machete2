/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.TransportprovidersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transportproviders extends TableImpl<TransportprovidersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.TransportProviders</code>
     */
    public static final Transportproviders TRANSPORTPROVIDERS = new Transportproviders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransportprovidersRecord> getRecordType() {
        return TransportprovidersRecord.class;
    }

    /**
     * The column <code>public.TransportProviders.id</code>.
     */
    public final TableField<TransportprovidersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"TransportProviders_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.TransportProviders.key</code>.
     */
    public final TableField<TransportprovidersRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.TransportProviders.text_EN</code>.
     */
    public final TableField<TransportprovidersRecord, String> TEXT_EN = createField(DSL.name("text_EN"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.TransportProviders.text_ES</code>.
     */
    public final TableField<TransportprovidersRecord, String> TEXT_ES = createField(DSL.name("text_ES"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.TransportProviders.defaultAttribute</code>.
     */
    public final TableField<TransportprovidersRecord, String> DEFAULTATTRIBUTE = createField(DSL.name("defaultAttribute"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.TransportProviders.sortorder</code>.
     */
    public final TableField<TransportprovidersRecord, Integer> SORTORDER = createField(DSL.name("sortorder"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.TransportProviders.active</code>.
     */
    public final TableField<TransportprovidersRecord, String> ACTIVE = createField(DSL.name("active"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.TransportProviders.datecreated</code>.
     */
    public final TableField<TransportprovidersRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.TransportProviders.dateupdated</code>.
     */
    public final TableField<TransportprovidersRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.TransportProviders.Createdby</code>.
     */
    public final TableField<TransportprovidersRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.TransportProviders.Updatedby</code>.
     */
    public final TableField<TransportprovidersRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    private Transportproviders(Name alias, Table<TransportprovidersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transportproviders(Name alias, Table<TransportprovidersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.TransportProviders</code> table reference
     */
    public Transportproviders(String alias) {
        this(DSL.name(alias), TRANSPORTPROVIDERS);
    }

    /**
     * Create an aliased <code>public.TransportProviders</code> table reference
     */
    public Transportproviders(Name alias) {
        this(alias, TRANSPORTPROVIDERS);
    }

    /**
     * Create a <code>public.TransportProviders</code> table reference
     */
    public Transportproviders() {
        this(DSL.name("TransportProviders"), null);
    }

    public <O extends Record> Transportproviders(Table<O> child, ForeignKey<O, TransportprovidersRecord> key) {
        super(child, key, TRANSPORTPROVIDERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TransportprovidersRecord> getPrimaryKey() {
        return Keys.PK_DBO_TRANSPORTPROVIDERS;
    }

    @Override
    public List<UniqueKey<TransportprovidersRecord>> getKeys() {
        return Arrays.<UniqueKey<TransportprovidersRecord>>asList(Keys.PK_DBO_TRANSPORTPROVIDERS);
    }

    @Override
    public Transportproviders as(String alias) {
        return new Transportproviders(DSL.name(alias), this);
    }

    @Override
    public Transportproviders as(Name alias) {
        return new Transportproviders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transportproviders rename(String name) {
        return new Transportproviders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transportproviders rename(Name name) {
        return new Transportproviders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, String, String, String, Integer, String, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
