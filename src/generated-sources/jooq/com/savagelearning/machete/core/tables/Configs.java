/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.ConfigsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Configs extends TableImpl<ConfigsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Configs</code>
     */
    public static final Configs CONFIGS = new Configs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigsRecord> getRecordType() {
        return ConfigsRecord.class;
    }

    /**
     * The column <code>public.Configs.id</code>.
     */
    public final TableField<ConfigsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"Configs_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Configs.key</code>.
     */
    public final TableField<ConfigsRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Configs.value</code>.
     */
    public final TableField<ConfigsRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.Configs.description</code>.
     */
    public final TableField<ConfigsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.Configs.category</code>.
     */
    public final TableField<ConfigsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.Configs.datecreated</code>.
     */
    public final TableField<ConfigsRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Configs.dateupdated</code>.
     */
    public final TableField<ConfigsRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Configs.Createdby</code>.
     */
    public final TableField<ConfigsRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Configs.Updatedby</code>.
     */
    public final TableField<ConfigsRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Configs.publicConfig</code>.
     */
    public final TableField<ConfigsRecord, String> PUBLICCONFIG = createField(DSL.name("publicConfig"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field("B'1'::\"bit\"", SQLDataType.CHAR)), this, "");

    private Configs(Name alias, Table<ConfigsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Configs(Name alias, Table<ConfigsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.Configs</code> table reference
     */
    public Configs(String alias) {
        this(DSL.name(alias), CONFIGS);
    }

    /**
     * Create an aliased <code>public.Configs</code> table reference
     */
    public Configs(Name alias) {
        this(alias, CONFIGS);
    }

    /**
     * Create a <code>public.Configs</code> table reference
     */
    public Configs() {
        this(DSL.name("Configs"), null);
    }

    public <O extends Record> Configs(Table<O> child, ForeignKey<O, ConfigsRecord> key) {
        super(child, key, CONFIGS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ConfigsRecord> getPrimaryKey() {
        return Keys.PK_DBO_CONFIGS;
    }

    @Override
    public List<UniqueKey<ConfigsRecord>> getKeys() {
        return Arrays.<UniqueKey<ConfigsRecord>>asList(Keys.PK_DBO_CONFIGS);
    }

    @Override
    public Configs as(String alias) {
        return new Configs(DSL.name(alias), this);
    }

    @Override
    public Configs as(Name alias) {
        return new Configs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Configs rename(String name) {
        return new Configs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configs rename(Name name) {
        return new Configs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, String, String, String, LocalDateTime, LocalDateTime, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
