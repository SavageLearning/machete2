/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.ActivitiesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row17;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Activities extends TableImpl<ActivitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Activities</code>
     */
    public static final Activities ACTIVITIES = new Activities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ActivitiesRecord> getRecordType() {
        return ActivitiesRecord.class;
    }

    /**
     * The column <code>public.Activities.id</code>.
     */
    public final TableField<ActivitiesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"Activities_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Activities.name</code>.
     */
    public final TableField<ActivitiesRecord, Integer> NAME = createField(DSL.name("name"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Activities.type</code>.
     */
    public final TableField<ActivitiesRecord, Integer> TYPE = createField(DSL.name("type"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Activities.dateStart</code>.
     */
    public final TableField<ActivitiesRecord, LocalDateTime> DATESTART = createField(DSL.name("dateStart"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Activities.dateEnd</code>.
     */
    public final TableField<ActivitiesRecord, LocalDateTime> DATEEND = createField(DSL.name("dateEnd"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Activities.teacher</code>.
     */
    public final TableField<ActivitiesRecord, String> TEACHER = createField(DSL.name("teacher"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.Activities.notes</code>.
     */
    public final TableField<ActivitiesRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>public.Activities.datecreated</code>.
     */
    public final TableField<ActivitiesRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Activities.dateupdated</code>.
     */
    public final TableField<ActivitiesRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Activities.Createdby</code>.
     */
    public final TableField<ActivitiesRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Activities.Updatedby</code>.
     */
    public final TableField<ActivitiesRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Activities.recurring</code>.
     */
    public final TableField<ActivitiesRecord, String> RECURRING = createField(DSL.name("recurring"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field("B'0'::\"bit\"", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>public.Activities.firstID</code>.
     */
    public final TableField<ActivitiesRecord, Integer> FIRSTID = createField(DSL.name("firstID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Activities.nameEN</code>.
     */
    public final TableField<ActivitiesRecord, String> NAMEEN = createField(DSL.name("nameEN"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Activities.nameES</code>.
     */
    public final TableField<ActivitiesRecord, String> NAMEES = createField(DSL.name("nameES"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Activities.typeEN</code>.
     */
    public final TableField<ActivitiesRecord, String> TYPEEN = createField(DSL.name("typeEN"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Activities.typeES</code>.
     */
    public final TableField<ActivitiesRecord, String> TYPEES = createField(DSL.name("typeES"), SQLDataType.VARCHAR(50), this, "");

    private Activities(Name alias, Table<ActivitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Activities(Name alias, Table<ActivitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.Activities</code> table reference
     */
    public Activities(String alias) {
        this(DSL.name(alias), ACTIVITIES);
    }

    /**
     * Create an aliased <code>public.Activities</code> table reference
     */
    public Activities(Name alias) {
        this(alias, ACTIVITIES);
    }

    /**
     * Create a <code>public.Activities</code> table reference
     */
    public Activities() {
        this(DSL.name("Activities"), null);
    }

    public <O extends Record> Activities(Table<O> child, ForeignKey<O, ActivitiesRecord> key) {
        super(child, key, ACTIVITIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ActivitiesRecord> getPrimaryKey() {
        return Keys.PK_ACTIVITIES;
    }

    @Override
    public List<UniqueKey<ActivitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<ActivitiesRecord>>asList(Keys.PK_ACTIVITIES);
    }

    @Override
    public Activities as(String alias) {
        return new Activities(DSL.name(alias), this);
    }

    @Override
    public Activities as(Name alias) {
        return new Activities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Activities rename(String name) {
        return new Activities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Activities rename(Name name) {
        return new Activities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row17 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row17<Integer, Integer, Integer, LocalDateTime, LocalDateTime, String, String, LocalDateTime, LocalDateTime, String, String, String, Integer, String, String, String, String> fieldsRow() {
        return (Row17) super.fieldsRow();
    }
}
