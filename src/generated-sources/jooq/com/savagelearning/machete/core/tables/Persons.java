/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.PersonsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Persons extends TableImpl<PersonsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Persons</code>
     */
    public static final Persons PERSONS = new Persons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PersonsRecord> getRecordType() {
        return PersonsRecord.class;
    }

    /**
     * The column <code>public.Persons.id</code>.
     */
    public final TableField<PersonsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"Persons_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Persons.active</code>.
     */
    public final TableField<PersonsRecord, String> ACTIVE = createField(DSL.name("active"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.Persons.firstname1</code>.
     */
    public final TableField<PersonsRecord, String> FIRSTNAME1 = createField(DSL.name("firstname1"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Persons.firstname2</code>.
     */
    public final TableField<PersonsRecord, String> FIRSTNAME2 = createField(DSL.name("firstname2"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Persons.lastname1</code>.
     */
    public final TableField<PersonsRecord, String> LASTNAME1 = createField(DSL.name("lastname1"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Persons.lastname2</code>.
     */
    public final TableField<PersonsRecord, String> LASTNAME2 = createField(DSL.name("lastname2"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Persons.address1</code>.
     */
    public final TableField<PersonsRecord, String> ADDRESS1 = createField(DSL.name("address1"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Persons.address2</code>.
     */
    public final TableField<PersonsRecord, String> ADDRESS2 = createField(DSL.name("address2"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Persons.city</code>.
     */
    public final TableField<PersonsRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(25), this, "");

    /**
     * The column <code>public.Persons.state</code>.
     */
    public final TableField<PersonsRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(2), this, "");

    /**
     * The column <code>public.Persons.zipcode</code>.
     */
    public final TableField<PersonsRecord, String> ZIPCODE = createField(DSL.name("zipcode"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.Persons.phone</code>.
     */
    public final TableField<PersonsRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>public.Persons.gender</code>.
     */
    public final TableField<PersonsRecord, Integer> GENDER = createField(DSL.name("gender"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Persons.genderother</code>.
     */
    public final TableField<PersonsRecord, String> GENDEROTHER = createField(DSL.name("genderother"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.Persons.datecreated</code>.
     */
    public final TableField<PersonsRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Persons.dateupdated</code>.
     */
    public final TableField<PersonsRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Persons.Createdby</code>.
     */
    public final TableField<PersonsRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Persons.Updatedby</code>.
     */
    public final TableField<PersonsRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Persons.nickname</code>.
     */
    public final TableField<PersonsRecord, String> NICKNAME = createField(DSL.name("nickname"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Persons.cellphone</code>.
     */
    public final TableField<PersonsRecord, String> CELLPHONE = createField(DSL.name("cellphone"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>public.Persons.email</code>.
     */
    public final TableField<PersonsRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Persons.facebook</code>.
     */
    public final TableField<PersonsRecord, String> FACEBOOK = createField(DSL.name("facebook"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Persons.fullName</code>.
     */
    public final TableField<PersonsRecord, String> FULLNAME = createField(DSL.name("fullName"), SQLDataType.VARCHAR, this, "");

    private Persons(Name alias, Table<PersonsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Persons(Name alias, Table<PersonsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.Persons</code> table reference
     */
    public Persons(String alias) {
        this(DSL.name(alias), PERSONS);
    }

    /**
     * Create an aliased <code>public.Persons</code> table reference
     */
    public Persons(Name alias) {
        this(alias, PERSONS);
    }

    /**
     * Create a <code>public.Persons</code> table reference
     */
    public Persons() {
        this(DSL.name("Persons"), null);
    }

    public <O extends Record> Persons(Table<O> child, ForeignKey<O, PersonsRecord> key) {
        super(child, key, PERSONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PersonsRecord> getPrimaryKey() {
        return Keys.PK__PERSONS__3214EC275FDDAF4D;
    }

    @Override
    public List<UniqueKey<PersonsRecord>> getKeys() {
        return Arrays.<UniqueKey<PersonsRecord>>asList(Keys.PK__PERSONS__3214EC275FDDAF4D);
    }

    @Override
    public Persons as(String alias) {
        return new Persons(DSL.name(alias), this);
    }

    @Override
    public Persons as(Name alias) {
        return new Persons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(String name) {
        return new Persons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Persons rename(Name name) {
        return new Persons(name, null);
    }
}
