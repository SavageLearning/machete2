/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.TransportprovideravailabilitiesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transportprovideravailabilities extends TableImpl<TransportprovideravailabilitiesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.TransportProviderAvailabilities</code>
     */
    public static final Transportprovideravailabilities TRANSPORTPROVIDERAVAILABILITIES = new Transportprovideravailabilities();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransportprovideravailabilitiesRecord> getRecordType() {
        return TransportprovideravailabilitiesRecord.class;
    }

    /**
     * The column <code>public.TransportProviderAvailabilities.id</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"TransportProviderAvailabilities_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.TransportProviderAvailabilities.transportProviderID</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, Integer> TRANSPORTPROVIDERID = createField(DSL.name("transportProviderID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.TransportProviderAvailabilities.key</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.TransportProviderAvailabilities.lookupKey</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, String> LOOKUPKEY = createField(DSL.name("lookupKey"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.TransportProviderAvailabilities.day</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, Integer> DAY = createField(DSL.name("day"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.TransportProviderAvailabilities.available</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, String> AVAILABLE = createField(DSL.name("available"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.TransportProviderAvailabilities.datecreated</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.TransportProviderAvailabilities.dateupdated</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.TransportProviderAvailabilities.Createdby</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.TransportProviderAvailabilities.Updatedby</code>.
     */
    public final TableField<TransportprovideravailabilitiesRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    private Transportprovideravailabilities(Name alias, Table<TransportprovideravailabilitiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transportprovideravailabilities(Name alias, Table<TransportprovideravailabilitiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.TransportProviderAvailabilities</code> table reference
     */
    public Transportprovideravailabilities(String alias) {
        this(DSL.name(alias), TRANSPORTPROVIDERAVAILABILITIES);
    }

    /**
     * Create an aliased <code>public.TransportProviderAvailabilities</code> table reference
     */
    public Transportprovideravailabilities(Name alias) {
        this(alias, TRANSPORTPROVIDERAVAILABILITIES);
    }

    /**
     * Create a <code>public.TransportProviderAvailabilities</code> table reference
     */
    public Transportprovideravailabilities() {
        this(DSL.name("TransportProviderAvailabilities"), null);
    }

    public <O extends Record> Transportprovideravailabilities(Table<O> child, ForeignKey<O, TransportprovideravailabilitiesRecord> key) {
        super(child, key, TRANSPORTPROVIDERAVAILABILITIES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TransportprovideravailabilitiesRecord> getPrimaryKey() {
        return Keys.PK_DBO_TRANSPORTPROVIDERAVAILABILITIES;
    }

    @Override
    public List<UniqueKey<TransportprovideravailabilitiesRecord>> getKeys() {
        return Arrays.<UniqueKey<TransportprovideravailabilitiesRecord>>asList(Keys.PK_DBO_TRANSPORTPROVIDERAVAILABILITIES);
    }

    @Override
    public List<ForeignKey<TransportprovideravailabilitiesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransportprovideravailabilitiesRecord, ?>>asList(Keys.TRANSPORTPROVIDERAVAILABILITIES__FK_DBO_TRANSPORTPROVIDERAVAILABILITIES_DBO_TRANSPORTPROVIDERS_T);
    }

    public Transportproviders transportproviders() {
        return new Transportproviders(this, Keys.TRANSPORTPROVIDERAVAILABILITIES__FK_DBO_TRANSPORTPROVIDERAVAILABILITIES_DBO_TRANSPORTPROVIDERS_T);
    }

    @Override
    public Transportprovideravailabilities as(String alias) {
        return new Transportprovideravailabilities(DSL.name(alias), this);
    }

    @Override
    public Transportprovideravailabilities as(Name alias) {
        return new Transportprovideravailabilities(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transportprovideravailabilities rename(String name) {
        return new Transportprovideravailabilities(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transportprovideravailabilities rename(Name name) {
        return new Transportprovideravailabilities(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, Integer, String, String, Integer, String, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
