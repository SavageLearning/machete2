/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables.daos;


import com.savagelearning.machete.core.tables.Images;
import com.savagelearning.machete.core.tables.records.ImagesRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImagesDao extends DAOImpl<ImagesRecord, com.savagelearning.machete.core.tables.pojos.Images, Integer> {

    /**
     * Create a new ImagesDao without any configuration
     */
    public ImagesDao() {
        super(Images.IMAGES, com.savagelearning.machete.core.tables.pojos.Images.class);
    }

    /**
     * Create a new ImagesDao with an attached configuration
     */
    public ImagesDao(Configuration configuration) {
        super(Images.IMAGES, com.savagelearning.machete.core.tables.pojos.Images.class, configuration);
    }

    @Override
    public Integer getId(com.savagelearning.machete.core.tables.pojos.Images object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Images.IMAGES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchById(Integer... values) {
        return fetch(Images.IMAGES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.savagelearning.machete.core.tables.pojos.Images fetchOneById(Integer value) {
        return fetchOne(Images.IMAGES.ID, value);
    }

    /**
     * Fetch records that have <code>ImageData BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfImagedata(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Images.IMAGES.IMAGEDATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ImageData IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByImagedata(byte[]... values) {
        return fetch(Images.IMAGES.IMAGEDATA, values);
    }

    /**
     * Fetch records that have <code>ImageMimeType BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfImagemimetype(String lowerInclusive, String upperInclusive) {
        return fetchRange(Images.IMAGES.IMAGEMIMETYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ImageMimeType IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByImagemimetype(String... values) {
        return fetch(Images.IMAGES.IMAGEMIMETYPE, values);
    }

    /**
     * Fetch records that have <code>filename BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfFilename(String lowerInclusive, String upperInclusive) {
        return fetchRange(Images.IMAGES.FILENAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>filename IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByFilename(String... values) {
        return fetch(Images.IMAGES.FILENAME, values);
    }

    /**
     * Fetch records that have <code>Thumbnail BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfThumbnail(byte[] lowerInclusive, byte[] upperInclusive) {
        return fetchRange(Images.IMAGES.THUMBNAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Thumbnail IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByThumbnail(byte[]... values) {
        return fetch(Images.IMAGES.THUMBNAIL, values);
    }

    /**
     * Fetch records that have <code>ThumbnailMimeType BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfThumbnailmimetype(String lowerInclusive, String upperInclusive) {
        return fetchRange(Images.IMAGES.THUMBNAILMIMETYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ThumbnailMimeType IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByThumbnailmimetype(String... values) {
        return fetch(Images.IMAGES.THUMBNAILMIMETYPE, values);
    }

    /**
     * Fetch records that have <code>parenttable BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfParenttable(String lowerInclusive, String upperInclusive) {
        return fetchRange(Images.IMAGES.PARENTTABLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parenttable IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByParenttable(String... values) {
        return fetch(Images.IMAGES.PARENTTABLE, values);
    }

    /**
     * Fetch records that have <code>recordkey BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfRecordkey(String lowerInclusive, String upperInclusive) {
        return fetchRange(Images.IMAGES.RECORDKEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>recordkey IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByRecordkey(String... values) {
        return fetch(Images.IMAGES.RECORDKEY, values);
    }

    /**
     * Fetch records that have <code>datecreated BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfDatecreated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Images.IMAGES.DATECREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datecreated IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByDatecreated(LocalDateTime... values) {
        return fetch(Images.IMAGES.DATECREATED, values);
    }

    /**
     * Fetch records that have <code>dateupdated BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfDateupdated(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Images.IMAGES.DATEUPDATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dateupdated IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByDateupdated(LocalDateTime... values) {
        return fetch(Images.IMAGES.DATEUPDATED, values);
    }

    /**
     * Fetch records that have <code>Createdby BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfCreatedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(Images.IMAGES.CREATEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Createdby IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByCreatedby(String... values) {
        return fetch(Images.IMAGES.CREATEDBY, values);
    }

    /**
     * Fetch records that have <code>Updatedby BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchRangeOfUpdatedby(String lowerInclusive, String upperInclusive) {
        return fetchRange(Images.IMAGES.UPDATEDBY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>Updatedby IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Images> fetchByUpdatedby(String... values) {
        return fetch(Images.IMAGES.UPDATEDBY, values);
    }
}
