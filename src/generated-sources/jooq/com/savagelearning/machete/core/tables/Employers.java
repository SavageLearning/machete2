/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.EmployersRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employers extends TableImpl<EmployersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Employers</code>
     */
    public static final Employers EMPLOYERS = new Employers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployersRecord> getRecordType() {
        return EmployersRecord.class;
    }

    /**
     * The column <code>public.Employers.id</code>.
     */
    public final TableField<EmployersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"Employers_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Employers.active</code>.
     */
    public final TableField<EmployersRecord, String> ACTIVE = createField(DSL.name("active"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.Employers.business</code>.
     */
    public final TableField<EmployersRecord, String> BUSINESS = createField(DSL.name("business"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.Employers.name</code>.
     */
    public final TableField<EmployersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Employers.address1</code>.
     */
    public final TableField<EmployersRecord, String> ADDRESS1 = createField(DSL.name("address1"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Employers.address2</code>.
     */
    public final TableField<EmployersRecord, String> ADDRESS2 = createField(DSL.name("address2"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Employers.city</code>.
     */
    public final TableField<EmployersRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Employers.state</code>.
     */
    public final TableField<EmployersRecord, String> STATE = createField(DSL.name("state"), SQLDataType.VARCHAR(2).nullable(false), this, "");

    /**
     * The column <code>public.Employers.phone</code>.
     */
    public final TableField<EmployersRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    /**
     * The column <code>public.Employers.cellphone</code>.
     */
    public final TableField<EmployersRecord, String> CELLPHONE = createField(DSL.name("cellphone"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>public.Employers.zipcode</code>.
     */
    public final TableField<EmployersRecord, String> ZIPCODE = createField(DSL.name("zipcode"), SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>public.Employers.email</code>.
     */
    public final TableField<EmployersRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Employers.referredby</code>.
     */
    public final TableField<EmployersRecord, Integer> REFERREDBY = createField(DSL.name("referredby"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.Employers.referredbyOther</code>.
     */
    public final TableField<EmployersRecord, String> REFERREDBYOTHER = createField(DSL.name("referredbyOther"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Employers.blogparticipate</code>.
     */
    public final TableField<EmployersRecord, String> BLOGPARTICIPATE = createField(DSL.name("blogparticipate"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>public.Employers.notes</code>.
     */
    public final TableField<EmployersRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>public.Employers.datecreated</code>.
     */
    public final TableField<EmployersRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Employers.dateupdated</code>.
     */
    public final TableField<EmployersRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Employers.Createdby</code>.
     */
    public final TableField<EmployersRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Employers.Updatedby</code>.
     */
    public final TableField<EmployersRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Employers.onlineSource</code>.
     */
    public final TableField<EmployersRecord, String> ONLINESOURCE = createField(DSL.name("onlineSource"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field("B'0'::\"bit\"", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>public.Employers.returnCustomer</code>.
     */
    public final TableField<EmployersRecord, String> RETURNCUSTOMER = createField(DSL.name("returnCustomer"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field("B'0'::\"bit\"", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>public.Employers.receiveUpdates</code>.
     */
    public final TableField<EmployersRecord, String> RECEIVEUPDATES = createField(DSL.name("receiveUpdates"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field("B'0'::\"bit\"", SQLDataType.CHAR)), this, "");

    /**
     * The column <code>public.Employers.businessname</code>.
     */
    public final TableField<EmployersRecord, String> BUSINESSNAME = createField(DSL.name("businessname"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.Employers.licenseplate</code>.
     */
    public final TableField<EmployersRecord, String> LICENSEPLATE = createField(DSL.name("licenseplate"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.Employers.driverslicense</code>.
     */
    public final TableField<EmployersRecord, String> DRIVERSLICENSE = createField(DSL.name("driverslicense"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Employers.onlineSigninID</code>.
     */
    public final TableField<EmployersRecord, String> ONLINESIGNINID = createField(DSL.name("onlineSigninID"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>public.Employers.isOnlineProfileComplete</code>.
     */
    public final TableField<EmployersRecord, String> ISONLINEPROFILECOMPLETE = createField(DSL.name("isOnlineProfileComplete"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>public.Employers.fax</code>.
     */
    public final TableField<EmployersRecord, String> FAX = createField(DSL.name("fax"), SQLDataType.VARCHAR(12), this, "");

    private Employers(Name alias, Table<EmployersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employers(Name alias, Table<EmployersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.Employers</code> table reference
     */
    public Employers(String alias) {
        this(DSL.name(alias), EMPLOYERS);
    }

    /**
     * Create an aliased <code>public.Employers</code> table reference
     */
    public Employers(Name alias) {
        this(alias, EMPLOYERS);
    }

    /**
     * Create a <code>public.Employers</code> table reference
     */
    public Employers() {
        this(DSL.name("Employers"), null);
    }

    public <O extends Record> Employers(Table<O> child, ForeignKey<O, EmployersRecord> key) {
        super(child, key, EMPLOYERS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<EmployersRecord> getPrimaryKey() {
        return Keys.PK__EMPLOYER__3214EC2794CD86BE;
    }

    @Override
    public List<UniqueKey<EmployersRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployersRecord>>asList(Keys.PK__EMPLOYER__3214EC2794CD86BE);
    }

    @Override
    public Employers as(String alias) {
        return new Employers(DSL.name(alias), this);
    }

    @Override
    public Employers as(Name alias) {
        return new Employers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employers rename(String name) {
        return new Employers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employers rename(Name name) {
        return new Employers(name, null);
    }
}
