/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.TransportrulesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transportrules extends TableImpl<TransportrulesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.TransportRules</code>
     */
    public static final Transportrules TRANSPORTRULES = new Transportrules();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransportrulesRecord> getRecordType() {
        return TransportrulesRecord.class;
    }

    /**
     * The column <code>public.TransportRules.id</code>.
     */
    public final TableField<TransportrulesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"TransportRules_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.TransportRules.key</code>.
     */
    public final TableField<TransportrulesRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.TransportRules.lookupKey</code>.
     */
    public final TableField<TransportrulesRecord, String> LOOKUPKEY = createField(DSL.name("lookupKey"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.TransportRules.zoneLabel</code>.
     */
    public final TableField<TransportrulesRecord, String> ZONELABEL = createField(DSL.name("zoneLabel"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.TransportRules.zipcodes</code>.
     */
    public final TableField<TransportrulesRecord, String> ZIPCODES = createField(DSL.name("zipcodes"), SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>public.TransportRules.datecreated</code>.
     */
    public final TableField<TransportrulesRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.TransportRules.dateupdated</code>.
     */
    public final TableField<TransportrulesRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.TransportRules.Createdby</code>.
     */
    public final TableField<TransportrulesRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.TransportRules.Updatedby</code>.
     */
    public final TableField<TransportrulesRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    private Transportrules(Name alias, Table<TransportrulesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transportrules(Name alias, Table<TransportrulesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.TransportRules</code> table reference
     */
    public Transportrules(String alias) {
        this(DSL.name(alias), TRANSPORTRULES);
    }

    /**
     * Create an aliased <code>public.TransportRules</code> table reference
     */
    public Transportrules(Name alias) {
        this(alias, TRANSPORTRULES);
    }

    /**
     * Create a <code>public.TransportRules</code> table reference
     */
    public Transportrules() {
        this(DSL.name("TransportRules"), null);
    }

    public <O extends Record> Transportrules(Table<O> child, ForeignKey<O, TransportrulesRecord> key) {
        super(child, key, TRANSPORTRULES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TransportrulesRecord> getPrimaryKey() {
        return Keys.PK_DBO_TRANSPORTRULES;
    }

    @Override
    public List<UniqueKey<TransportrulesRecord>> getKeys() {
        return Arrays.<UniqueKey<TransportrulesRecord>>asList(Keys.PK_DBO_TRANSPORTRULES);
    }

    @Override
    public Transportrules as(String alias) {
        return new Transportrules(DSL.name(alias), this);
    }

    @Override
    public Transportrules as(Name alias) {
        return new Transportrules(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transportrules rename(String name) {
        return new Transportrules(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transportrules rename(Name name) {
        return new Transportrules(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
