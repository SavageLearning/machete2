/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables.records;


import com.savagelearning.machete.core.tables.Images;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImagesRecord extends UpdatableRecordImpl<ImagesRecord> implements Record12<Integer, byte[], String, String, byte[], String, String, String, LocalDateTime, LocalDateTime, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.Images.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.Images.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.Images.ImageData</code>.
     */
    public void setImagedata(byte[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.Images.ImageData</code>.
     */
    public byte[] getImagedata() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>public.Images.ImageMimeType</code>.
     */
    public void setImagemimetype(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.Images.ImageMimeType</code>.
     */
    public String getImagemimetype() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.Images.filename</code>.
     */
    public void setFilename(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.Images.filename</code>.
     */
    public String getFilename() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.Images.Thumbnail</code>.
     */
    public void setThumbnail(byte[] value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.Images.Thumbnail</code>.
     */
    public byte[] getThumbnail() {
        return (byte[]) get(4);
    }

    /**
     * Setter for <code>public.Images.ThumbnailMimeType</code>.
     */
    public void setThumbnailmimetype(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.Images.ThumbnailMimeType</code>.
     */
    public String getThumbnailmimetype() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.Images.parenttable</code>.
     */
    public void setParenttable(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.Images.parenttable</code>.
     */
    public String getParenttable() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.Images.recordkey</code>.
     */
    public void setRecordkey(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.Images.recordkey</code>.
     */
    public String getRecordkey() {
        return (String) get(7);
    }

    /**
     * Setter for <code>public.Images.datecreated</code>.
     */
    public void setDatecreated(LocalDateTime value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.Images.datecreated</code>.
     */
    public LocalDateTime getDatecreated() {
        return (LocalDateTime) get(8);
    }

    /**
     * Setter for <code>public.Images.dateupdated</code>.
     */
    public void setDateupdated(LocalDateTime value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.Images.dateupdated</code>.
     */
    public LocalDateTime getDateupdated() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>public.Images.Createdby</code>.
     */
    public void setCreatedby(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.Images.Createdby</code>.
     */
    public String getCreatedby() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.Images.Updatedby</code>.
     */
    public void setUpdatedby(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.Images.Updatedby</code>.
     */
    public String getUpdatedby() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Integer, byte[], String, String, byte[], String, String, String, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Integer, byte[], String, String, byte[], String, String, String, LocalDateTime, LocalDateTime, String, String> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Images.IMAGES.ID;
    }

    @Override
    public Field<byte[]> field2() {
        return Images.IMAGES.IMAGEDATA;
    }

    @Override
    public Field<String> field3() {
        return Images.IMAGES.IMAGEMIMETYPE;
    }

    @Override
    public Field<String> field4() {
        return Images.IMAGES.FILENAME;
    }

    @Override
    public Field<byte[]> field5() {
        return Images.IMAGES.THUMBNAIL;
    }

    @Override
    public Field<String> field6() {
        return Images.IMAGES.THUMBNAILMIMETYPE;
    }

    @Override
    public Field<String> field7() {
        return Images.IMAGES.PARENTTABLE;
    }

    @Override
    public Field<String> field8() {
        return Images.IMAGES.RECORDKEY;
    }

    @Override
    public Field<LocalDateTime> field9() {
        return Images.IMAGES.DATECREATED;
    }

    @Override
    public Field<LocalDateTime> field10() {
        return Images.IMAGES.DATEUPDATED;
    }

    @Override
    public Field<String> field11() {
        return Images.IMAGES.CREATEDBY;
    }

    @Override
    public Field<String> field12() {
        return Images.IMAGES.UPDATEDBY;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public byte[] component2() {
        return getImagedata();
    }

    @Override
    public String component3() {
        return getImagemimetype();
    }

    @Override
    public String component4() {
        return getFilename();
    }

    @Override
    public byte[] component5() {
        return getThumbnail();
    }

    @Override
    public String component6() {
        return getThumbnailmimetype();
    }

    @Override
    public String component7() {
        return getParenttable();
    }

    @Override
    public String component8() {
        return getRecordkey();
    }

    @Override
    public LocalDateTime component9() {
        return getDatecreated();
    }

    @Override
    public LocalDateTime component10() {
        return getDateupdated();
    }

    @Override
    public String component11() {
        return getCreatedby();
    }

    @Override
    public String component12() {
        return getUpdatedby();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public byte[] value2() {
        return getImagedata();
    }

    @Override
    public String value3() {
        return getImagemimetype();
    }

    @Override
    public String value4() {
        return getFilename();
    }

    @Override
    public byte[] value5() {
        return getThumbnail();
    }

    @Override
    public String value6() {
        return getThumbnailmimetype();
    }

    @Override
    public String value7() {
        return getParenttable();
    }

    @Override
    public String value8() {
        return getRecordkey();
    }

    @Override
    public LocalDateTime value9() {
        return getDatecreated();
    }

    @Override
    public LocalDateTime value10() {
        return getDateupdated();
    }

    @Override
    public String value11() {
        return getCreatedby();
    }

    @Override
    public String value12() {
        return getUpdatedby();
    }

    @Override
    public ImagesRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ImagesRecord value2(byte[] value) {
        setImagedata(value);
        return this;
    }

    @Override
    public ImagesRecord value3(String value) {
        setImagemimetype(value);
        return this;
    }

    @Override
    public ImagesRecord value4(String value) {
        setFilename(value);
        return this;
    }

    @Override
    public ImagesRecord value5(byte[] value) {
        setThumbnail(value);
        return this;
    }

    @Override
    public ImagesRecord value6(String value) {
        setThumbnailmimetype(value);
        return this;
    }

    @Override
    public ImagesRecord value7(String value) {
        setParenttable(value);
        return this;
    }

    @Override
    public ImagesRecord value8(String value) {
        setRecordkey(value);
        return this;
    }

    @Override
    public ImagesRecord value9(LocalDateTime value) {
        setDatecreated(value);
        return this;
    }

    @Override
    public ImagesRecord value10(LocalDateTime value) {
        setDateupdated(value);
        return this;
    }

    @Override
    public ImagesRecord value11(String value) {
        setCreatedby(value);
        return this;
    }

    @Override
    public ImagesRecord value12(String value) {
        setUpdatedby(value);
        return this;
    }

    @Override
    public ImagesRecord values(Integer value1, byte[] value2, String value3, String value4, byte[] value5, String value6, String value7, String value8, LocalDateTime value9, LocalDateTime value10, String value11, String value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImagesRecord
     */
    public ImagesRecord() {
        super(Images.IMAGES);
    }

    /**
     * Create a detached, initialised ImagesRecord
     */
    public ImagesRecord(Integer id, byte[] imagedata, String imagemimetype, String filename, byte[] thumbnail, String thumbnailmimetype, String parenttable, String recordkey, LocalDateTime datecreated, LocalDateTime dateupdated, String createdby, String updatedby) {
        super(Images.IMAGES);

        setId(id);
        setImagedata(imagedata);
        setImagemimetype(imagemimetype);
        setFilename(filename);
        setThumbnail(thumbnail);
        setThumbnailmimetype(thumbnailmimetype);
        setParenttable(parenttable);
        setRecordkey(recordkey);
        setDatecreated(datecreated);
        setDateupdated(dateupdated);
        setCreatedby(createdby);
        setUpdatedby(updatedby);
    }
}
