/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.LookupsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lookups extends TableImpl<LookupsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Lookups</code>
     */
    public static final Lookups LOOKUPS = new Lookups();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LookupsRecord> getRecordType() {
        return LookupsRecord.class;
    }

    /**
     * The column <code>public.Lookups.id</code>.
     */
    public final TableField<LookupsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"Lookups_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Lookups.category</code>.
     */
    public final TableField<LookupsRecord, String> CATEGORY = createField(DSL.name("category"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>public.Lookups.text_EN</code>.
     */
    public final TableField<LookupsRecord, String> TEXT_EN = createField(DSL.name("text_EN"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Lookups.text_ES</code>.
     */
    public final TableField<LookupsRecord, String> TEXT_ES = createField(DSL.name("text_ES"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Lookups.selected</code>.
     */
    public final TableField<LookupsRecord, String> SELECTED = createField(DSL.name("selected"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.Lookups.subcategory</code>.
     */
    public final TableField<LookupsRecord, String> SUBCATEGORY = createField(DSL.name("subcategory"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.Lookups.level</code>.
     */
    public final TableField<LookupsRecord, Integer> LEVEL = createField(DSL.name("level"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.Lookups.wage</code>.
     */
    public final TableField<LookupsRecord, Double> WAGE = createField(DSL.name("wage"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.Lookups.minHour</code>.
     */
    public final TableField<LookupsRecord, Integer> MINHOUR = createField(DSL.name("minHour"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.Lookups.fixedJob</code>.
     */
    public final TableField<LookupsRecord, String> FIXEDJOB = createField(DSL.name("fixedJob"), SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>public.Lookups.sortorder</code>.
     */
    public final TableField<LookupsRecord, Integer> SORTORDER = createField(DSL.name("sortorder"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.Lookups.typeOfWorkID</code>.
     */
    public final TableField<LookupsRecord, Integer> TYPEOFWORKID = createField(DSL.name("typeOfWorkID"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.Lookups.speciality</code>.
     */
    public final TableField<LookupsRecord, String> SPECIALITY = createField(DSL.name("speciality"), SQLDataType.CHAR(1).nullable(false), this, "");

    /**
     * The column <code>public.Lookups.ltrCode</code>.
     */
    public final TableField<LookupsRecord, String> LTRCODE = createField(DSL.name("ltrCode"), SQLDataType.VARCHAR(3), this, "");

    /**
     * The column <code>public.Lookups.datecreated</code>.
     */
    public final TableField<LookupsRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Lookups.dateupdated</code>.
     */
    public final TableField<LookupsRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Lookups.Createdby</code>.
     */
    public final TableField<LookupsRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Lookups.Updatedby</code>.
     */
    public final TableField<LookupsRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Lookups.emailTemplate</code>.
     */
    public final TableField<LookupsRecord, String> EMAILTEMPLATE = createField(DSL.name("emailTemplate"), SQLDataType.VARCHAR(4000), this, "");

    /**
     * The column <code>public.Lookups.key</code>.
     */
    public final TableField<LookupsRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Lookups.skillDescriptionEn</code>.
     */
    public final TableField<LookupsRecord, String> SKILLDESCRIPTIONEN = createField(DSL.name("skillDescriptionEn"), SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>public.Lookups.skillDescriptionEs</code>.
     */
    public final TableField<LookupsRecord, String> SKILLDESCRIPTIONES = createField(DSL.name("skillDescriptionEs"), SQLDataType.VARCHAR(300), this, "");

    /**
     * The column <code>public.Lookups.minimumCost</code>.
     */
    public final TableField<LookupsRecord, Double> MINIMUMCOST = createField(DSL.name("minimumCost"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.Lookups.active</code>.
     */
    public final TableField<LookupsRecord, String> ACTIVE = createField(DSL.name("active"), SQLDataType.CHAR(1).nullable(false).defaultValue(DSL.field("B'1'::\"bit\"", SQLDataType.CHAR)), this, "");

    private Lookups(Name alias, Table<LookupsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lookups(Name alias, Table<LookupsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.Lookups</code> table reference
     */
    public Lookups(String alias) {
        this(DSL.name(alias), LOOKUPS);
    }

    /**
     * Create an aliased <code>public.Lookups</code> table reference
     */
    public Lookups(Name alias) {
        this(alias, LOOKUPS);
    }

    /**
     * Create a <code>public.Lookups</code> table reference
     */
    public Lookups() {
        this(DSL.name("Lookups"), null);
    }

    public <O extends Record> Lookups(Table<O> child, ForeignKey<O, LookupsRecord> key) {
        super(child, key, LOOKUPS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<LookupsRecord> getPrimaryKey() {
        return Keys.PK__LOOKUPS__3214EC276073CE99;
    }

    @Override
    public List<UniqueKey<LookupsRecord>> getKeys() {
        return Arrays.<UniqueKey<LookupsRecord>>asList(Keys.PK__LOOKUPS__3214EC276073CE99);
    }

    @Override
    public Lookups as(String alias) {
        return new Lookups(DSL.name(alias), this);
    }

    @Override
    public Lookups as(Name alias) {
        return new Lookups(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lookups rename(String name) {
        return new Lookups(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lookups rename(Name name) {
        return new Lookups(name, null);
    }
}
