/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables;


import com.savagelearning.machete.core.Keys;
import com.savagelearning.machete.core.Public;
import com.savagelearning.machete.core.tables.records.EmailsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row15;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Emails extends TableImpl<EmailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.Emails</code>
     */
    public static final Emails EMAILS = new Emails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmailsRecord> getRecordType() {
        return EmailsRecord.class;
    }

    /**
     * The column <code>public.Emails.id</code>.
     */
    public final TableField<EmailsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('\"Emails_id_seq\"'::regclass)", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.Emails.emailFrom</code>.
     */
    public final TableField<EmailsRecord, String> EMAILFROM = createField(DSL.name("emailFrom"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.Emails.emailTo</code>.
     */
    public final TableField<EmailsRecord, String> EMAILTO = createField(DSL.name("emailTo"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.Emails.subject</code>.
     */
    public final TableField<EmailsRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.Emails.body</code>.
     */
    public final TableField<EmailsRecord, String> BODY = createField(DSL.name("body"), SQLDataType.VARCHAR(4000).nullable(false), this, "");

    /**
     * The column <code>public.Emails.transmitAttempts</code>.
     */
    public final TableField<EmailsRecord, Integer> TRANSMITATTEMPTS = createField(DSL.name("transmitAttempts"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Emails.statusID</code>.
     */
    public final TableField<EmailsRecord, Integer> STATUSID = createField(DSL.name("statusID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.Emails.lastAttempt</code>.
     */
    public final TableField<EmailsRecord, LocalDateTime> LASTATTEMPT = createField(DSL.name("lastAttempt"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.Emails.attachment</code>.
     */
    public final TableField<EmailsRecord, String> ATTACHMENT = createField(DSL.name("attachment"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.Emails.attachmentContentType</code>.
     */
    public final TableField<EmailsRecord, String> ATTACHMENTCONTENTTYPE = createField(DSL.name("attachmentContentType"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.Emails.RowVersion</code>.
     */
    public final TableField<EmailsRecord, LocalDateTime> ROWVERSION = createField(DSL.name("RowVersion"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Emails.datecreated</code>.
     */
    public final TableField<EmailsRecord, LocalDateTime> DATECREATED = createField(DSL.name("datecreated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Emails.dateupdated</code>.
     */
    public final TableField<EmailsRecord, LocalDateTime> DATEUPDATED = createField(DSL.name("dateupdated"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.Emails.Createdby</code>.
     */
    public final TableField<EmailsRecord, String> CREATEDBY = createField(DSL.name("Createdby"), SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.Emails.Updatedby</code>.
     */
    public final TableField<EmailsRecord, String> UPDATEDBY = createField(DSL.name("Updatedby"), SQLDataType.VARCHAR(30), this, "");

    private Emails(Name alias, Table<EmailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Emails(Name alias, Table<EmailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.Emails</code> table reference
     */
    public Emails(String alias) {
        this(DSL.name(alias), EMAILS);
    }

    /**
     * Create an aliased <code>public.Emails</code> table reference
     */
    public Emails(Name alias) {
        this(alias, EMAILS);
    }

    /**
     * Create a <code>public.Emails</code> table reference
     */
    public Emails() {
        this(DSL.name("Emails"), null);
    }

    public <O extends Record> Emails(Table<O> child, ForeignKey<O, EmailsRecord> key) {
        super(child, key, EMAILS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<EmailsRecord> getPrimaryKey() {
        return Keys.PK_DBO_EMAILS;
    }

    @Override
    public List<UniqueKey<EmailsRecord>> getKeys() {
        return Arrays.<UniqueKey<EmailsRecord>>asList(Keys.PK_DBO_EMAILS);
    }

    @Override
    public Emails as(String alias) {
        return new Emails(DSL.name(alias), this);
    }

    @Override
    public Emails as(Name alias) {
        return new Emails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Emails rename(String name) {
        return new Emails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Emails rename(Name name) {
        return new Emails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, String, String, String, String, Integer, Integer, LocalDateTime, String, String, LocalDateTime, LocalDateTime, LocalDateTime, String, String> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
