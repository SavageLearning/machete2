/*
 * This file is generated by jOOQ.
 */
package com.savagelearning.machete.core.tables.daos;


import com.savagelearning.machete.core.tables.Drivingdistances;
import com.savagelearning.machete.core.tables.records.DrivingdistancesRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DrivingdistancesDao extends DAOImpl<DrivingdistancesRecord, com.savagelearning.machete.core.tables.pojos.Drivingdistances, Integer> {

    /**
     * Create a new DrivingdistancesDao without any configuration
     */
    public DrivingdistancesDao() {
        super(Drivingdistances.DRIVINGDISTANCES, com.savagelearning.machete.core.tables.pojos.Drivingdistances.class);
    }

    /**
     * Create a new DrivingdistancesDao with an attached configuration
     */
    public DrivingdistancesDao(Configuration configuration) {
        super(Drivingdistances.DRIVINGDISTANCES, com.savagelearning.machete.core.tables.pojos.Drivingdistances.class, configuration);
    }

    @Override
    public Integer getId(com.savagelearning.machete.core.tables.pojos.Drivingdistances object) {
        return object.getDistancesid();
    }

    /**
     * Fetch records that have <code>distancesID BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Drivingdistances> fetchRangeOfDistancesid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Drivingdistances.DRIVINGDISTANCES.DISTANCESID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>distancesID IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Drivingdistances> fetchByDistancesid(Integer... values) {
        return fetch(Drivingdistances.DRIVINGDISTANCES.DISTANCESID, values);
    }

    /**
     * Fetch a unique record that has <code>distancesID = value</code>
     */
    public com.savagelearning.machete.core.tables.pojos.Drivingdistances fetchOneByDistancesid(Integer value) {
        return fetchOne(Drivingdistances.DRIVINGDISTANCES.DISTANCESID, value);
    }

    /**
     * Fetch records that have <code>workOrderId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Drivingdistances> fetchRangeOfWorkorderid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Drivingdistances.DRIVINGDISTANCES.WORKORDERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>workOrderId IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Drivingdistances> fetchByWorkorderid(Integer... values) {
        return fetch(Drivingdistances.DRIVINGDISTANCES.WORKORDERID, values);
    }

    /**
     * Fetch a unique record that has <code>workOrderId = value</code>
     */
    public com.savagelearning.machete.core.tables.pojos.Drivingdistances fetchOneByWorkorderid(Integer value) {
        return fetchOne(Drivingdistances.DRIVINGDISTANCES.WORKORDERID, value);
    }

    /**
     * Fetch records that have <code>drivingDistanceInMiles BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Drivingdistances> fetchRangeOfDrivingdistanceinmiles(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(Drivingdistances.DRIVINGDISTANCES.DRIVINGDISTANCEINMILES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>drivingDistanceInMiles IN (values)</code>
     */
    public List<com.savagelearning.machete.core.tables.pojos.Drivingdistances> fetchByDrivingdistanceinmiles(Double... values) {
        return fetch(Drivingdistances.DRIVINGDISTANCES.DRIVINGDISTANCEINMILES, values);
    }
}
